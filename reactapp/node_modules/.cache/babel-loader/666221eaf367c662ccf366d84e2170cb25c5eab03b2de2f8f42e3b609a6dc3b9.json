{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishnu\\\\project\\\\OnlineBankingDashboard\\\\cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb\\\\reactapp\\\\src\\\\components\\\\TransferForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${accountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <div>\n//       <h2>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>\n//             Type: <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Date: <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             From Account ID: <br />\n//             <input type=\"text\" value={accountId} readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Recipient Account: <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Amount: <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Description: <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\">Transfer</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\n// import React, { useState, useEffect } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   // Keep fromAccountId in sync if accountId prop changes\n//   useEffect(() => {\n//     if (accountId) {\n//       setFromAccountId(accountId);\n//     }\n//   }, [accountId]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${fromAccountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form except fromAccountId (optional)\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   const inputStyle = {\n//     width: '100%',\n//     padding: '8px',\n//     marginTop: '4px',\n//     marginBottom: '12px',\n//     borderRadius: '4px',\n//     border: '1px solid #ccc',\n//     fontSize: '14px',\n//   };\n\n//   const labelStyle = {\n//     fontWeight: '600',\n//     color: '#333',\n//   };\n\n//   const buttonStyle = {\n//     padding: '10px 20px',\n//     backgroundColor: '#007bff',\n//     border: 'none',\n//     borderRadius: '5px',\n//     color: 'white',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//   };\n\n//   const formStyle = {\n//     maxWidth: '400px',\n//     margin: '20px auto',\n//     padding: '15px',\n//     border: '1px solid #ddd',\n//     borderRadius: '8px',\n//     backgroundColor: '#fafafa',\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n//   };\n\n//   return (\n//     <div style={formStyle}>\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label style={labelStyle}>\n//             Type:\n//             <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Date:\n//             <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             From Account ID:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={fromAccountId}\n//               onChange={(e) => setFromAccountId(e.target.value)}\n//               placeholder=\"From Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Recipient Account:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Amount:\n//             <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Description:\n//             <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\" style={buttonStyle}>\n//           Transfer\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\nimport React, { useState, useEffect } from 'react';\nimport { transferMoney } from '../utils/api'; // adjust path if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransferForm({\n  accountId\n}) {\n  _s();\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\n  const [date, setDate] = useState('');\n  const [recipientAccount, setRecipientAccount] = useState('');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (accountId) {\n      setFromAccountId(accountId);\n    }\n  }, [accountId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('');\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\n      setMessage('Please fill in all required fields.');\n      return;\n    }\n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      setMessage('Please enter a valid amount greater than 0.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const result = await transferMoney({\n        fromAccountId,\n        toAccountId: recipientAccount,\n        amount: amountValue,\n        description\n      });\n      setMessage('Transfer successful!');\n      // Reset form except fromAccountId\n      setDate('');\n      setRecipientAccount('');\n      setAmount('');\n      setDescription('');\n    } catch (error) {\n      setMessage(`Transfer failed: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const inputStyle = {\n    width: '100%',\n    padding: '8px',\n    marginTop: '4px',\n    marginBottom: '12px',\n    borderRadius: '4px',\n    border: '1px solid #ccc',\n    fontSize: '14px'\n  };\n  const labelStyle = {\n    fontWeight: '600',\n    color: '#333'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    backgroundColor: loading ? '#ccc' : '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    color: 'white',\n    cursor: loading ? 'not-allowed' : 'pointer',\n    fontSize: '16px'\n  };\n  const formStyle = {\n    maxWidth: '400px',\n    margin: '20px auto',\n    padding: '15px',\n    border: '1px solid #ddd',\n    borderRadius: '8px',\n    backgroundColor: '#fafafa',\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: formStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: '#222',\n        marginBottom: '20px'\n      },\n      children: \"Transfer Money\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Type:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: \"Transfer\",\n            readOnly: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"From Account ID:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fromAccountId,\n            onChange: e => setFromAccountId(e.target.value),\n            placeholder: \"From Account ID\",\n            required: true,\n            style: inputStyle,\n            readOnly: !!accountId // prevent editing if provided from props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Recipient Account:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: recipientAccount,\n            onChange: e => setRecipientAccount(e.target.value),\n            placeholder: \"Recipient Account ID\",\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Amount:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            placeholder: \"Amount\",\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: labelStyle,\n          children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: description,\n            onChange: e => setDescription(e.target.value),\n            placeholder: \"Optional description\",\n            style: {\n              ...inputStyle,\n              height: '80px',\n              resize: 'vertical'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: buttonStyle,\n        disabled: loading,\n        children: loading ? 'Transferring...' : 'Transfer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: '600',\n        color: message.startsWith('Transfer failed') ? 'red' : 'green',\n        maxWidth: '400px',\n        margin: '10px auto'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n_s(TransferForm, \"+wolcC7XZi5zZcDjy0QqG3bDPJY=\");\n_c = TransferForm;\nexport default TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","transferMoney","jsxDEV","_jsxDEV","TransferForm","accountId","_s","fromAccountId","setFromAccountId","date","setDate","recipientAccount","setRecipientAccount","amount","setAmount","description","setDescription","message","setMessage","loading","setLoading","handleSubmit","e","preventDefault","amountValue","parseFloat","isNaN","result","toAccountId","error","inputStyle","width","padding","marginTop","marginBottom","borderRadius","border","fontSize","labelStyle","fontWeight","color","buttonStyle","backgroundColor","cursor","formStyle","maxWidth","margin","boxShadow","fontFamily","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","readOnly","onChange","target","required","placeholder","min","step","height","resize","disabled","startsWith","_c","$RefreshReg$"],"sources":["C:/Users/vishnu/project/OnlineBankingDashboard/cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb/reactapp/src/components/TransferForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${accountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>\r\n//             Type: <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Date: <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             From Account ID: <br />\r\n//             <input type=\"text\" value={accountId} readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Recipient Account: <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Amount: <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Description: <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Transfer</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   // Keep fromAccountId in sync if accountId prop changes\r\n//   useEffect(() => {\r\n//     if (accountId) {\r\n//       setFromAccountId(accountId);\r\n//     }\r\n//   }, [accountId]);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${fromAccountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form except fromAccountId (optional)\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   const inputStyle = {\r\n//     width: '100%',\r\n//     padding: '8px',\r\n//     marginTop: '4px',\r\n//     marginBottom: '12px',\r\n//     borderRadius: '4px',\r\n//     border: '1px solid #ccc',\r\n//     fontSize: '14px',\r\n//   };\r\n\r\n//   const labelStyle = {\r\n//     fontWeight: '600',\r\n//     color: '#333',\r\n//   };\r\n\r\n//   const buttonStyle = {\r\n//     padding: '10px 20px',\r\n//     backgroundColor: '#007bff',\r\n//     border: 'none',\r\n//     borderRadius: '5px',\r\n//     color: 'white',\r\n//     cursor: 'pointer',\r\n//     fontSize: '16px',\r\n//   };\r\n\r\n//   const formStyle = {\r\n//     maxWidth: '400px',\r\n//     margin: '20px auto',\r\n//     padding: '15px',\r\n//     border: '1px solid #ddd',\r\n//     borderRadius: '8px',\r\n//     backgroundColor: '#fafafa',\r\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n//   };\r\n\r\n//   return (\r\n//     <div style={formStyle}>\r\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Type:\r\n//             <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Date:\r\n//             <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             From Account ID:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={fromAccountId}\r\n//               onChange={(e) => setFromAccountId(e.target.value)}\r\n//               placeholder=\"From Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Recipient Account:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Amount:\r\n//             <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Description:\r\n//             <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\" style={buttonStyle}>\r\n//           Transfer\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n \r\nimport React, { useState, useEffect } from 'react';\r\nimport { transferMoney } from '../utils/api'; // adjust path if needed\r\n\r\nfunction TransferForm({ accountId }) {\r\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n  const [date, setDate] = useState('');\r\n  const [recipientAccount, setRecipientAccount] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (accountId) {\r\n      setFromAccountId(accountId);\r\n    }\r\n  }, [accountId]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n\r\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n      setMessage('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    const amountValue = parseFloat(amount);\r\n    if (isNaN(amountValue) || amountValue <= 0) {\r\n      setMessage('Please enter a valid amount greater than 0.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const result = await transferMoney({\r\n        fromAccountId,\r\n        toAccountId: recipientAccount,\r\n        amount: amountValue,\r\n        description,\r\n      });\r\n\r\n      setMessage('Transfer successful!');\r\n      // Reset form except fromAccountId\r\n      setDate('');\r\n      setRecipientAccount('');\r\n      setAmount('');\r\n      setDescription('');\r\n    } catch (error) {\r\n      setMessage(`Transfer failed: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const inputStyle = {\r\n    width: '100%',\r\n    padding: '8px',\r\n    marginTop: '4px',\r\n    marginBottom: '12px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc',\r\n    fontSize: '14px',\r\n  };\r\n\r\n  const labelStyle = {\r\n    fontWeight: '600',\r\n    color: '#333',\r\n  };\r\n\r\n  const buttonStyle = {\r\n    padding: '10px 20px',\r\n    backgroundColor: loading ? '#ccc' : '#007bff',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    cursor: loading ? 'not-allowed' : 'pointer',\r\n    fontSize: '16px',\r\n  };\r\n\r\n  const formStyle = {\r\n    maxWidth: '400px',\r\n    margin: '20px auto',\r\n    padding: '15px',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#fafafa',\r\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n  };\r\n\r\n  return (\r\n    <div style={formStyle}>\r\n      <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label style={labelStyle}>\r\n            Type:\r\n            <br />\r\n            <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label style={labelStyle}>\r\n            Date:\r\n            <br />\r\n            <input\r\n              type=\"date\"\r\n              value={date}\r\n              onChange={(e) => setDate(e.target.value)}\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label style={labelStyle}>\r\n            From Account ID:\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={fromAccountId}\r\n              onChange={(e) => setFromAccountId(e.target.value)}\r\n              placeholder=\"From Account ID\"\r\n              required\r\n              style={inputStyle}\r\n              readOnly={!!accountId} // prevent editing if provided from props\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label style={labelStyle}>\r\n            Recipient Account:\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={recipientAccount}\r\n              onChange={(e) => setRecipientAccount(e.target.value)}\r\n              placeholder=\"Recipient Account ID\"\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label style={labelStyle}>\r\n            Amount:\r\n            <br />\r\n            <input\r\n              type=\"number\"\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              placeholder=\"Amount\"\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label style={labelStyle}>\r\n            Description:\r\n            <br />\r\n            <textarea\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              placeholder=\"Optional description\"\r\n              style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n          {loading ? 'Transferring...' : 'Transfer'}\r\n        </button>\r\n      </form>\r\n      {message && <p style={{ fontWeight: '600', color: message.startsWith('Transfer failed') ? 'red' : 'green', maxWidth: '400px', margin: '10px auto' }}>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransferForm;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}