{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishnu\\\\project\\\\OnlineBankingDashboard\\\\cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb\\\\reactapp\\\\src\\\\components\\\\TransferForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${accountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <div>\n//       <h2>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>\n//             Type: <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Date: <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             From Account ID: <br />\n//             <input type=\"text\" value={accountId} readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Recipient Account: <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Amount: <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Description: <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\">Transfer</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\n// import React, { useState, useEffect } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   // Keep fromAccountId in sync if accountId prop changes\n//   useEffect(() => {\n//     if (accountId) {\n//       setFromAccountId(accountId);\n//     }\n//   }, [accountId]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${fromAccountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form except fromAccountId (optional)\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   const inputStyle = {\n//     width: '100%',\n//     padding: '8px',\n//     marginTop: '4px',\n//     marginBottom: '12px',\n//     borderRadius: '4px',\n//     border: '1px solid #ccc',\n//     fontSize: '14px',\n//   };\n\n//   const labelStyle = {\n//     fontWeight: '600',\n//     color: '#333',\n//   };\n\n//   const buttonStyle = {\n//     padding: '10px 20px',\n//     backgroundColor: '#007bff',\n//     border: 'none',\n//     borderRadius: '5px',\n//     color: 'white',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//   };\n\n//   const formStyle = {\n//     maxWidth: '400px',\n//     margin: '20px auto',\n//     padding: '15px',\n//     border: '1px solid #ddd',\n//     borderRadius: '8px',\n//     backgroundColor: '#fafafa',\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n//   };\n\n//   return (\n//     <div style={formStyle}>\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label style={labelStyle}>\n//             Type:\n//             <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Date:\n//             <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             From Account ID:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={fromAccountId}\n//               onChange={(e) => setFromAccountId(e.target.value)}\n//               placeholder=\"From Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Recipient Account:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Amount:\n//             <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Description:\n//             <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\" style={buttonStyle}>\n//           Transfer\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TransferForm({\n  accountId\n}) {\n  _s();\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\n  const [date, setDate] = useState('');\n  const [recipientAccount, setRecipientAccount] = useState('');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Keep fromAccountId in sync if accountId prop changes\n  useEffect(() => {\n    if (accountId) {\n      setFromAccountId(accountId);\n    }\n  }, [accountId]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\n      alert('Please fill in all required fields.');\n      return;\n    }\n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      alert('Please enter a valid amount greater than 0.');\n      return;\n    }\n\n    // Prepare success message\n    const message = `Transfer Details:\nType: Transfer\nDate: ${date}\nFrom Account: ${fromAccountId}\nRecipient Account: ${recipientAccount}\nAmount: $${amountValue.toFixed(2)}\nDescription: ${description || 'N/A'}`;\n    setSuccessMessage(message);\n    setShowSuccess(true);\n\n    // Reset form except fromAccountId (optional)\n    setDate('');\n    setRecipientAccount('');\n    setAmount('');\n    setDescription('');\n  };\n\n  // Styles for form and popup\n  const inputStyle = {\n    width: '100%',\n    padding: '8px',\n    marginTop: '4px',\n    marginBottom: '12px',\n    borderRadius: '4px',\n    border: '1px solid #ccc',\n    fontSize: '14px'\n  };\n  const labelStyle = {\n    fontWeight: '600',\n    color: '#333'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    backgroundColor: '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    color: 'white',\n    cursor: 'pointer',\n    fontSize: '16px'\n  };\n  const formStyle = {\n    maxWidth: '400px',\n    margin: '20px auto',\n    padding: '15px',\n    border: '1px solid #ddd',\n    borderRadius: '8px',\n    backgroundColor: '#fafafa',\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n  };\n  const popupOverlayStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000\n  };\n  const popupStyle = {\n    backgroundColor: 'white',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '400px',\n    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\n    whiteSpace: 'pre-wrap' // keep line breaks in message\n  };\n  const closeButtonStyle = {\n    marginTop: '15px',\n    padding: '8px 15px',\n    backgroundColor: '#28a745',\n    border: 'none',\n    borderRadius: '5px',\n    color: 'white',\n    cursor: 'pointer',\n    fontSize: '14px'\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: formStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: '#222',\n          marginBottom: '20px'\n        },\n        children: \"Transfer Money\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"type\",\n            style: labelStyle,\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"type\",\n            type: \"text\",\n            value: \"Transfer\",\n            readOnly: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            style: labelStyle,\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"date\",\n            type: \"date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fromAccountId\",\n            style: labelStyle,\n            children: \"From Account ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fromAccountId\",\n            type: \"text\",\n            value: fromAccountId,\n            onChange: e => setFromAccountId(e.target.value),\n            placeholder: \"From Account ID\",\n            required: true,\n            style: inputStyle,\n            readOnly: !!accountId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"recipientAccount\",\n            style: labelStyle,\n            children: \"Recipient Account:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"recipientAccount\",\n            type: \"text\",\n            value: recipientAccount,\n            onChange: e => setRecipientAccount(e.target.value),\n            placeholder: \"Recipient Account ID\",\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"amount\",\n            style: labelStyle,\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"amount\",\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            placeholder: \"Amount\",\n            required: true,\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            style: labelStyle,\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            value: description,\n            onChange: e => setDescription(e.target.value),\n            placeholder: \"Optional description\",\n            style: {\n              ...inputStyle,\n              height: '80px',\n              resize: 'vertical'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: buttonStyle,\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), showSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: popupOverlayStyle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: popupStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Success!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: closeButtonStyle,\n          onClick: () => setShowSuccess(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(TransferForm, \"2JOq3jm+UutR72TPi6zvlbMnduw=\");\n_c = TransferForm;\nexport default TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TransferForm","accountId","_s","fromAccountId","setFromAccountId","date","setDate","recipientAccount","setRecipientAccount","amount","setAmount","description","setDescription","showSuccess","setShowSuccess","successMessage","setSuccessMessage","handleSubmit","e","preventDefault","alert","amountValue","parseFloat","isNaN","message","toFixed","inputStyle","width","padding","marginTop","marginBottom","borderRadius","border","fontSize","labelStyle","fontWeight","color","buttonStyle","backgroundColor","cursor","formStyle","maxWidth","margin","boxShadow","fontFamily","popupOverlayStyle","position","top","left","height","display","justifyContent","alignItems","zIndex","popupStyle","whiteSpace","closeButtonStyle","children","style","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","value","readOnly","onChange","target","required","placeholder","min","step","resize","onClick","_c","$RefreshReg$"],"sources":["C:/Users/vishnu/project/OnlineBankingDashboard/cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb/reactapp/src/components/TransferForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${accountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>\r\n//             Type: <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Date: <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             From Account ID: <br />\r\n//             <input type=\"text\" value={accountId} readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Recipient Account: <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Amount: <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Description: <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Transfer</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   // Keep fromAccountId in sync if accountId prop changes\r\n//   useEffect(() => {\r\n//     if (accountId) {\r\n//       setFromAccountId(accountId);\r\n//     }\r\n//   }, [accountId]);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${fromAccountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form except fromAccountId (optional)\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   const inputStyle = {\r\n//     width: '100%',\r\n//     padding: '8px',\r\n//     marginTop: '4px',\r\n//     marginBottom: '12px',\r\n//     borderRadius: '4px',\r\n//     border: '1px solid #ccc',\r\n//     fontSize: '14px',\r\n//   };\r\n\r\n//   const labelStyle = {\r\n//     fontWeight: '600',\r\n//     color: '#333',\r\n//   };\r\n\r\n//   const buttonStyle = {\r\n//     padding: '10px 20px',\r\n//     backgroundColor: '#007bff',\r\n//     border: 'none',\r\n//     borderRadius: '5px',\r\n//     color: 'white',\r\n//     cursor: 'pointer',\r\n//     fontSize: '16px',\r\n//   };\r\n\r\n//   const formStyle = {\r\n//     maxWidth: '400px',\r\n//     margin: '20px auto',\r\n//     padding: '15px',\r\n//     border: '1px solid #ddd',\r\n//     borderRadius: '8px',\r\n//     backgroundColor: '#fafafa',\r\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n//   };\r\n\r\n//   return (\r\n//     <div style={formStyle}>\r\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Type:\r\n//             <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Date:\r\n//             <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             From Account ID:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={fromAccountId}\r\n//               onChange={(e) => setFromAccountId(e.target.value)}\r\n//               placeholder=\"From Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Recipient Account:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Amount:\r\n//             <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Description:\r\n//             <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\" style={buttonStyle}>\r\n//           Transfer\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction TransferForm({ accountId }) {\r\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n  const [date, setDate] = useState('');\r\n  const [recipientAccount, setRecipientAccount] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  // Keep fromAccountId in sync if accountId prop changes\r\n  useEffect(() => {\r\n    if (accountId) {\r\n      setFromAccountId(accountId);\r\n    }\r\n  }, [accountId]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n      alert('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    const amountValue = parseFloat(amount);\r\n    if (isNaN(amountValue) || amountValue <= 0) {\r\n      alert('Please enter a valid amount greater than 0.');\r\n      return;\r\n    }\r\n\r\n    // Prepare success message\r\n    const message = `Transfer Details:\r\nType: Transfer\r\nDate: ${date}\r\nFrom Account: ${fromAccountId}\r\nRecipient Account: ${recipientAccount}\r\nAmount: $${amountValue.toFixed(2)}\r\nDescription: ${description || 'N/A'}`;\r\n\r\n    setSuccessMessage(message);\r\n    setShowSuccess(true);\r\n\r\n    // Reset form except fromAccountId (optional)\r\n    setDate('');\r\n    setRecipientAccount('');\r\n    setAmount('');\r\n    setDescription('');\r\n  };\r\n\r\n  // Styles for form and popup\r\n  const inputStyle = {\r\n    width: '100%',\r\n    padding: '8px',\r\n    marginTop: '4px',\r\n    marginBottom: '12px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc',\r\n    fontSize: '14px',\r\n  };\r\n\r\n  const labelStyle = {\r\n    fontWeight: '600',\r\n    color: '#333',\r\n  };\r\n\r\n  const buttonStyle = {\r\n    padding: '10px 20px',\r\n    backgroundColor: '#007bff',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    cursor: 'pointer',\r\n    fontSize: '16px',\r\n  };\r\n\r\n  const formStyle = {\r\n    maxWidth: '400px',\r\n    margin: '20px auto',\r\n    padding: '15px',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#fafafa',\r\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n  };\r\n\r\n  const popupOverlayStyle = {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100vw',\r\n    height: '100vh',\r\n    backgroundColor: 'rgba(0,0,0,0.5)',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 1000,\r\n  };\r\n\r\n  const popupStyle = {\r\n    backgroundColor: 'white',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    maxWidth: '400px',\r\n    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\r\n    whiteSpace: 'pre-wrap', // keep line breaks in message\r\n  };\r\n\r\n  const closeButtonStyle = {\r\n    marginTop: '15px',\r\n    padding: '8px 15px',\r\n    backgroundColor: '#28a745',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    cursor: 'pointer',\r\n    fontSize: '14px',\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={formStyle}>\r\n        <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"type\" style={labelStyle}>\r\n              Type:\r\n            </label>\r\n            <br />\r\n            <input id=\"type\" type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"date\" style={labelStyle}>\r\n              Date:\r\n            </label>\r\n            <br />\r\n            <input\r\n              id=\"date\"\r\n              type=\"date\"\r\n              value={date}\r\n              onChange={(e) => setDate(e.target.value)}\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"fromAccountId\" style={labelStyle}>\r\n              From Account ID:\r\n            </label>\r\n            <br />\r\n            <input\r\n              id=\"fromAccountId\"\r\n              type=\"text\"\r\n              value={fromAccountId}\r\n              onChange={(e) => setFromAccountId(e.target.value)}\r\n              placeholder=\"From Account ID\"\r\n              required\r\n              style={inputStyle}\r\n              readOnly={!!accountId}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"recipientAccount\" style={labelStyle}>\r\n              Recipient Account:\r\n            </label>\r\n            <br />\r\n            <input\r\n              id=\"recipientAccount\"\r\n              type=\"text\"\r\n              value={recipientAccount}\r\n              onChange={(e) => setRecipientAccount(e.target.value)}\r\n              placeholder=\"Recipient Account ID\"\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"amount\" style={labelStyle}>\r\n              Amount:\r\n            </label>\r\n            <br />\r\n            <input\r\n              id=\"amount\"\r\n              type=\"number\"\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              placeholder=\"Amount\"\r\n              required\r\n              style={inputStyle}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"description\" style={labelStyle}>\r\n              Description:\r\n            </label>\r\n            <br />\r\n            <textarea\r\n              id=\"description\"\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              placeholder=\"Optional description\"\r\n              style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n            />\r\n          </div>\r\n\r\n          <button type=\"submit\" style={buttonStyle}>\r\n            Transfer\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      {showSuccess && (\r\n        <div style={popupOverlayStyle}>\r\n          <div style={popupStyle}>\r\n            <h3>Success!</h3>\r\n            <pre>{successMessage}</pre>\r\n            <button style={closeButtonStyle} onClick={() => setShowSuccess(false)}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TransferForm;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}