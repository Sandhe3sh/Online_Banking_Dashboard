{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { loginUser } from '../utils/api';\n\n// const styles = {\n//   container: {\n//     maxWidth: '400px',\n//     margin: '50px auto',\n//     padding: '30px 25px',\n//     background: '#fff',\n//     boxShadow: '0 0 15px rgba(0,0,0,0.1)',\n//     borderRadius: '8px',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n//   },\n//   heading: {\n//     textAlign: 'center',\n//     marginBottom: '20px',\n//     color: '#333',\n//   },\n//   form: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//   },\n//   input: {\n//     padding: '12px 15px',\n//     marginBottom: '15px',\n//     border: '1px solid #ccc',\n//     borderRadius: '6px',\n//     fontSize: '1rem',\n//     outline: 'none',\n//     transition: 'border-color 0.3s ease',\n//   },\n//   inputFocus: {\n//     borderColor: '#007BFF',\n//   },\n//   button: {\n//     padding: '12px 15px',\n//     backgroundColor: '#007BFF',\n//     border: 'none',\n//     borderRadius: '6px',\n//     color: 'white',\n//     fontSize: '1rem',\n//     cursor: 'pointer',\n//     transition: 'background-color 0.3s ease',\n//   },\n//   buttonHover: {\n//     backgroundColor: '#0056b3',\n//   },\n//   message: {\n//     textAlign: 'center',\n//     marginTop: '10px',\n//     fontWeight: '600',\n//   },\n//   messageSuccess: {\n//     color: '#28a745',\n//   },\n//   messageError: {\n//     color: '#d9534f',\n//   },\n//   switchText: {\n//     textAlign: 'center',\n//     color: '#555',\n//     marginTop: '15px',\n//     fontSize: '0.9rem',\n//   },\n//   switchButton: {\n//     background: 'none',\n//     border: 'none',\n//     color: '#007BFF',\n//     cursor: 'pointer',\n//     textDecoration: 'underline',\n//     fontSize: '0.9rem',\n//     padding: 0,\n//   },\n// };\n\n// const LoginForm = () => {\n//   const navigate = useNavigate();\n//   const [form, setForm] = useState({ username: '', password: '' });\n//   const [message, setMessage] = useState('');\n//   const [isSuccess, setIsSuccess] = useState(false);\n//   const [inputFocus, setInputFocus] = useState({ username: false, password: false });\n//   const [buttonHover, setButtonHover] = useState(false);\n\n//   const handleChange = (e) => {\n//     setForm({ ...form, [e.target.name]: e.target.value });\n//   };\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n//     setMessage('');\n//     try {\n//       const response = await loginUser(form);\n//       const user = response.data;\n\n//       if (!user || !user.role) {\n//         setMessage('Login failed: No role assigned');\n//         setIsSuccess(false);\n//         return;\n//       }\n\n//       // Normalize role to uppercase to avoid case issues\n//       const role = user.role.toUpperCase();\n\n//       console.log('User logged in:', user);  // Debug role and data\n\n//       setMessage(`Welcome ${user.username}, Role: ${role}`);\n//       setIsSuccess(true);\n//       localStorage.setItem('user', JSON.stringify(user));\n\n//       // Navigate based on normalized role\n//       if (role === 'ADMIN') {\n//         navigate('/admin-dashboard');\n//       } else if (role === 'USER') {\n//         navigate('/user-dashboard');\n//       } else {\n//         setMessage('Login succeeded, but role is unknown');\n//       }\n//     } catch (error) {\n//       const errMsg = error?.response?.data?.message || 'Login failed: Invalid credentials';\n//       setMessage(errMsg);\n//       setIsSuccess(false);\n//     }\n//   };\n\n//   const handleFocus = (field) => {\n//     setInputFocus({ ...inputFocus, [field]: true });\n//   };\n\n//   const handleBlur = (field) => {\n//     setInputFocus({ ...inputFocus, [field]: false });\n//   };\n\n//   return (\n//     <div style={styles.container} role=\"main\" aria-labelledby=\"login-heading\">\n//       <h2 id=\"login-heading\" style={styles.heading}>Login</h2>\n//       <form style={styles.form} onSubmit={handleLogin} noValidate>\n//         <input\n//           type=\"text\"\n//           name=\"username\"\n//           placeholder=\"Username\"\n//           onChange={handleChange}\n//           required\n//           autoComplete=\"username\"\n//           aria-label=\"Username\"\n//           onFocus={() => handleFocus('username')}\n//           onBlur={() => handleBlur('username')}\n//           style={{\n//             ...styles.input,\n//             ...(inputFocus.username ? styles.inputFocus : {}),\n//           }}\n//         />\n//         <input\n//           type=\"password\"\n//           name=\"password\"\n//           placeholder=\"Password\"\n//           onChange={handleChange}\n//           required\n//           autoComplete=\"current-password\"\n//           aria-label=\"Password\"\n//           onFocus={() => handleFocus('password')}\n//           onBlur={() => handleBlur('password')}\n//           style={{\n//             ...styles.input,\n//             ...(inputFocus.password ? styles.inputFocus : {}),\n//           }}\n//         />\n//         <button\n//           type=\"submit\"\n//           style={{\n//             ...styles.button,\n//             ...(buttonHover ? styles.buttonHover : {}),\n//           }}\n//           onMouseEnter={() => setButtonHover(true)}\n//           onMouseLeave={() => setButtonHover(false)}\n//           aria-label=\"Login\"\n//         >\n//           Login\n//         </button>\n//       </form>\n\n//       {message && (\n//         <p\n//           role=\"alert\"\n//           style={{\n//             ...styles.message,\n//             ...(isSuccess ? styles.messageSuccess : styles.messageError),\n//           }}\n//         >\n//           {message}\n//         </p>\n//       )}\n\n//       <p style={styles.switchText}>\n//         Don't have an account?{' '}\n//         <button\n//           style={styles.switchButton}\n//           onClick={() => navigate('/register')}\n//           aria-label=\"Navigate to Register\"\n//           type=\"button\"\n//         >\n//           Register here\n//         </button>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default LoginForm;","map":{"version":3,"names":[],"sources":["C:/Users/vishnu/project/OnlineBankingDashboard/cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb/reactapp/src/components/LoginForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { loginUser } from '../utils/api';\r\n\r\n// const styles = {\r\n//   container: {\r\n//     maxWidth: '400px',\r\n//     margin: '50px auto',\r\n//     padding: '30px 25px',\r\n//     background: '#fff',\r\n//     boxShadow: '0 0 15px rgba(0,0,0,0.1)',\r\n//     borderRadius: '8px',\r\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n//   },\r\n//   heading: {\r\n//     textAlign: 'center',\r\n//     marginBottom: '20px',\r\n//     color: '#333',\r\n//   },\r\n//   form: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//   },\r\n//   input: {\r\n//     padding: '12px 15px',\r\n//     marginBottom: '15px',\r\n//     border: '1px solid #ccc',\r\n//     borderRadius: '6px',\r\n//     fontSize: '1rem',\r\n//     outline: 'none',\r\n//     transition: 'border-color 0.3s ease',\r\n//   },\r\n//   inputFocus: {\r\n//     borderColor: '#007BFF',\r\n//   },\r\n//   button: {\r\n//     padding: '12px 15px',\r\n//     backgroundColor: '#007BFF',\r\n//     border: 'none',\r\n//     borderRadius: '6px',\r\n//     color: 'white',\r\n//     fontSize: '1rem',\r\n//     cursor: 'pointer',\r\n//     transition: 'background-color 0.3s ease',\r\n//   },\r\n//   buttonHover: {\r\n//     backgroundColor: '#0056b3',\r\n//   },\r\n//   message: {\r\n//     textAlign: 'center',\r\n//     marginTop: '10px',\r\n//     fontWeight: '600',\r\n//   },\r\n//   messageSuccess: {\r\n//     color: '#28a745',\r\n//   },\r\n//   messageError: {\r\n//     color: '#d9534f',\r\n//   },\r\n//   switchText: {\r\n//     textAlign: 'center',\r\n//     color: '#555',\r\n//     marginTop: '15px',\r\n//     fontSize: '0.9rem',\r\n//   },\r\n//   switchButton: {\r\n//     background: 'none',\r\n//     border: 'none',\r\n//     color: '#007BFF',\r\n//     cursor: 'pointer',\r\n//     textDecoration: 'underline',\r\n//     fontSize: '0.9rem',\r\n//     padding: 0,\r\n//   },\r\n// };\r\n\r\n// const LoginForm = () => {\r\n//   const navigate = useNavigate();\r\n//   const [form, setForm] = useState({ username: '', password: '' });\r\n//   const [message, setMessage] = useState('');\r\n//   const [isSuccess, setIsSuccess] = useState(false);\r\n//   const [inputFocus, setInputFocus] = useState({ username: false, password: false });\r\n//   const [buttonHover, setButtonHover] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     setForm({ ...form, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     setMessage('');\r\n//     try {\r\n//       const response = await loginUser(form);\r\n//       const user = response.data;\r\n\r\n//       if (!user || !user.role) {\r\n//         setMessage('Login failed: No role assigned');\r\n//         setIsSuccess(false);\r\n//         return;\r\n//       }\r\n\r\n//       // Normalize role to uppercase to avoid case issues\r\n//       const role = user.role.toUpperCase();\r\n\r\n//       console.log('User logged in:', user);  // Debug role and data\r\n\r\n//       setMessage(`Welcome ${user.username}, Role: ${role}`);\r\n//       setIsSuccess(true);\r\n//       localStorage.setItem('user', JSON.stringify(user));\r\n\r\n//       // Navigate based on normalized role\r\n//       if (role === 'ADMIN') {\r\n//         navigate('/admin-dashboard');\r\n//       } else if (role === 'USER') {\r\n//         navigate('/user-dashboard');\r\n//       } else {\r\n//         setMessage('Login succeeded, but role is unknown');\r\n//       }\r\n//     } catch (error) {\r\n//       const errMsg = error?.response?.data?.message || 'Login failed: Invalid credentials';\r\n//       setMessage(errMsg);\r\n//       setIsSuccess(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleFocus = (field) => {\r\n//     setInputFocus({ ...inputFocus, [field]: true });\r\n//   };\r\n\r\n//   const handleBlur = (field) => {\r\n//     setInputFocus({ ...inputFocus, [field]: false });\r\n//   };\r\n\r\n//   return (\r\n//     <div style={styles.container} role=\"main\" aria-labelledby=\"login-heading\">\r\n//       <h2 id=\"login-heading\" style={styles.heading}>Login</h2>\r\n//       <form style={styles.form} onSubmit={handleLogin} noValidate>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange}\r\n//           required\r\n//           autoComplete=\"username\"\r\n//           aria-label=\"Username\"\r\n//           onFocus={() => handleFocus('username')}\r\n//           onBlur={() => handleBlur('username')}\r\n//           style={{\r\n//             ...styles.input,\r\n//             ...(inputFocus.username ? styles.inputFocus : {}),\r\n//           }}\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           name=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange}\r\n//           required\r\n//           autoComplete=\"current-password\"\r\n//           aria-label=\"Password\"\r\n//           onFocus={() => handleFocus('password')}\r\n//           onBlur={() => handleBlur('password')}\r\n//           style={{\r\n//             ...styles.input,\r\n//             ...(inputFocus.password ? styles.inputFocus : {}),\r\n//           }}\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           style={{\r\n//             ...styles.button,\r\n//             ...(buttonHover ? styles.buttonHover : {}),\r\n//           }}\r\n//           onMouseEnter={() => setButtonHover(true)}\r\n//           onMouseLeave={() => setButtonHover(false)}\r\n//           aria-label=\"Login\"\r\n//         >\r\n//           Login\r\n//         </button>\r\n//       </form>\r\n\r\n//       {message && (\r\n//         <p\r\n//           role=\"alert\"\r\n//           style={{\r\n//             ...styles.message,\r\n//             ...(isSuccess ? styles.messageSuccess : styles.messageError),\r\n//           }}\r\n//         >\r\n//           {message}\r\n//         </p>\r\n//       )}\r\n\r\n//       <p style={styles.switchText}>\r\n//         Don't have an account?{' '}\r\n//         <button\r\n//           style={styles.switchButton}\r\n//           onClick={() => navigate('/register')}\r\n//           aria-label=\"Navigate to Register\"\r\n//           type=\"button\"\r\n//         >\r\n//           Register here\r\n//         </button>\r\n//       </p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LoginForm;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}