{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishnu\\\\project\\\\OnlineBankingDashboard\\\\cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb\\\\reactapp\\\\src\\\\components\\\\TransferForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${accountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <div>\n//       <h2>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>\n//             Type: <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Date: <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             From Account ID: <br />\n//             <input type=\"text\" value={accountId} readOnly />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Recipient Account: <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Amount: <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label>\n//             Description: <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\">Transfer</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\n// import React, { useState, useEffect } from 'react';\n\n// function TransferForm({ accountId }) {\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\n//   const [date, setDate] = useState('');\n//   const [recipientAccount, setRecipientAccount] = useState('');\n//   const [amount, setAmount] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   // Keep fromAccountId in sync if accountId prop changes\n//   useEffect(() => {\n//     if (accountId) {\n//       setFromAccountId(accountId);\n//     }\n//   }, [accountId]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\n//       alert('Please fill in all required fields.');\n//       return;\n//     }\n\n//     alert(`Transfer Details:\n//     Type: Transfer\n//     Date: ${date}\n//     From Account: ${fromAccountId}\n//     Recipient Account: ${recipientAccount}\n//     Amount: $${amount}\n//     Description: ${description}`);\n\n//     // Reset form except fromAccountId (optional)\n//     setDate('');\n//     setRecipientAccount('');\n//     setAmount('');\n//     setDescription('');\n//   };\n\n//   const inputStyle = {\n//     width: '100%',\n//     padding: '8px',\n//     marginTop: '4px',\n//     marginBottom: '12px',\n//     borderRadius: '4px',\n//     border: '1px solid #ccc',\n//     fontSize: '14px',\n//   };\n\n//   const labelStyle = {\n//     fontWeight: '600',\n//     color: '#333',\n//   };\n\n//   const buttonStyle = {\n//     padding: '10px 20px',\n//     backgroundColor: '#007bff',\n//     border: 'none',\n//     borderRadius: '5px',\n//     color: 'white',\n//     cursor: 'pointer',\n//     fontSize: '16px',\n//   };\n\n//   const formStyle = {\n//     maxWidth: '400px',\n//     margin: '20px auto',\n//     padding: '15px',\n//     border: '1px solid #ddd',\n//     borderRadius: '8px',\n//     backgroundColor: '#fafafa',\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n//   };\n\n//   return (\n//     <div style={formStyle}>\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label style={labelStyle}>\n//             Type:\n//             <br />\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Date:\n//             <br />\n//             <input\n//               type=\"date\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             From Account ID:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={fromAccountId}\n//               onChange={(e) => setFromAccountId(e.target.value)}\n//               placeholder=\"From Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Recipient Account:\n//             <br />\n//             <input\n//               type=\"text\"\n//               value={recipientAccount}\n//               onChange={(e) => setRecipientAccount(e.target.value)}\n//               placeholder=\"Recipient Account ID\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Amount:\n//             <br />\n//             <input\n//               type=\"number\"\n//               min=\"0.01\"\n//               step=\"0.01\"\n//               value={amount}\n//               onChange={(e) => setAmount(e.target.value)}\n//               placeholder=\"Amount\"\n//               required\n//               style={inputStyle}\n//             />\n//           </label>\n//         </div>\n\n//         <div>\n//           <label style={labelStyle}>\n//             Description:\n//             <br />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               placeholder=\"Optional description\"\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\n//             />\n//           </label>\n//         </div>\n\n//         <button type=\"submit\" style={buttonStyle}>\n//           Transfer\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default TransferForm;\n\nimport React, { useState, useEffect } from 'react';\nimport { transferMoney } from './api'; // Adjust the import path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransferForm({\n  accountId\n}) {\n  _s();\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\n  const [date, setDate] = useState('');\n  const [recipientAccount, setRecipientAccount] = useState('');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    if (accountId) {\n      setFromAccountId(accountId);\n    }\n  }, [accountId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSuccessMessage('');\n    setErrorMessage('');\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\n      setErrorMessage('Please fill in all required fields.');\n      return;\n    }\n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      setErrorMessage('Please enter a valid amount greater than 0.');\n      return;\n    }\n    const transferData = {\n      type: 'Transfer',\n      date,\n      fromAccountId,\n      recipientAccount,\n      amount: amountValue,\n      description\n    };\n    setLoading(true);\n    try {\n      const response = await transferMoney(transferData);\n\n      // Assume backend returns some success info, adjust if needed\n      setSuccessMessage('Transfer successful! Transaction ID: ' + (response.data.transactionId || 'N/A'));\n\n      // Reset form except fromAccountId\n      setDate('');\n      setRecipientAccount('');\n      setAmount('');\n      setDescription('');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Transfer error:', error);\n      const msg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'An error occurred during transfer. Please try again.';\n      setErrorMessage(msg);\n    }\n    setLoading(false);\n  };\n  const inputStyle = {\n    width: '100%',\n    padding: '8px',\n    marginTop: '4px',\n    marginBottom: '12px',\n    borderRadius: '4px',\n    border: '1px solid #ccc',\n    fontSize: '14px'\n  };\n  const labelStyle = {\n    fontWeight: '600',\n    color: '#333'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    backgroundColor: loading ? '#999' : '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    color: 'white',\n    cursor: loading ? 'not-allowed' : 'pointer',\n    fontSize: '16px'\n  };\n  const formStyle = {\n    maxWidth: '400px',\n    margin: '20px auto',\n    padding: '15px',\n    border: '1px solid #ddd',\n    borderRadius: '8px',\n    backgroundColor: '#fafafa',\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n  };\n  const messageStyle = {\n    padding: '10px',\n    borderRadius: '5px',\n    marginBottom: '15px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: formStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: '#222',\n        marginBottom: '20px'\n      },\n      children: \"Transfer Money\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...messageStyle,\n        backgroundColor: '#d4edda',\n        color: '#155724'\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...messageStyle,\n        backgroundColor: '#f8d7da',\n        color: '#721c24'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"type\",\n          style: labelStyle,\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"type\",\n          type: \"text\",\n          value: \"Transfer\",\n          readOnly: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          style: labelStyle,\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"date\",\n          type: \"date\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fromAccountId\",\n          style: labelStyle,\n          children: \"From Account ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"fromAccountId\",\n          type: \"text\",\n          value: fromAccountId,\n          onChange: e => setFromAccountId(e.target.value),\n          placeholder: \"From Account ID\",\n          required: true,\n          style: inputStyle,\n          readOnly: !!accountId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"recipientAccount\",\n          style: labelStyle,\n          children: \"Recipient Account:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"recipientAccount\",\n          type: \"text\",\n          value: recipientAccount,\n          onChange: e => setRecipientAccount(e.target.value),\n          placeholder: \"Recipient Account ID\",\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          style: labelStyle,\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"amount\",\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          placeholder: \"Amount\",\n          required: true,\n          style: inputStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          style: labelStyle,\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: e => setDescription(e.target.value),\n          placeholder: \"Optional description\",\n          style: {\n            ...inputStyle,\n            height: '80px',\n            resize: 'vertical'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: buttonStyle,\n        disabled: loading,\n        children: loading ? 'Transferring...' : 'Transfer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}\n_s(TransferForm, \"pRR4Sz9EzndWW0MgzhJj6xKLXG4=\");\n_c = TransferForm;\nexport default TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","transferMoney","jsxDEV","_jsxDEV","TransferForm","accountId","_s","fromAccountId","setFromAccountId","date","setDate","recipientAccount","setRecipientAccount","amount","setAmount","description","setDescription","loading","setLoading","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","amountValue","parseFloat","isNaN","transferData","type","response","data","transactionId","error","_error$response","_error$response$data","console","msg","message","inputStyle","width","padding","marginTop","marginBottom","borderRadius","border","fontSize","labelStyle","fontWeight","color","buttonStyle","backgroundColor","cursor","formStyle","maxWidth","margin","boxShadow","fontFamily","messageStyle","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","value","readOnly","onChange","target","required","placeholder","min","step","height","resize","disabled","_c","$RefreshReg$"],"sources":["C:/Users/vishnu/project/OnlineBankingDashboard/cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb/reactapp/src/components/TransferForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${accountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>\r\n//             Type: <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Date: <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             From Account ID: <br />\r\n//             <input type=\"text\" value={accountId} readOnly />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Recipient Account: <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Amount: <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label>\r\n//             Description: <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Transfer</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function TransferForm({ accountId }) {\r\n//   const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n//   const [date, setDate] = useState('');\r\n//   const [recipientAccount, setRecipientAccount] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n\r\n//   // Keep fromAccountId in sync if accountId prop changes\r\n//   useEffect(() => {\r\n//     if (accountId) {\r\n//       setFromAccountId(accountId);\r\n//     }\r\n//   }, [accountId]);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n//       alert('Please fill in all required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     alert(`Transfer Details:\r\n//     Type: Transfer\r\n//     Date: ${date}\r\n//     From Account: ${fromAccountId}\r\n//     Recipient Account: ${recipientAccount}\r\n//     Amount: $${amount}\r\n//     Description: ${description}`);\r\n\r\n//     // Reset form except fromAccountId (optional)\r\n//     setDate('');\r\n//     setRecipientAccount('');\r\n//     setAmount('');\r\n//     setDescription('');\r\n//   };\r\n\r\n//   const inputStyle = {\r\n//     width: '100%',\r\n//     padding: '8px',\r\n//     marginTop: '4px',\r\n//     marginBottom: '12px',\r\n//     borderRadius: '4px',\r\n//     border: '1px solid #ccc',\r\n//     fontSize: '14px',\r\n//   };\r\n\r\n//   const labelStyle = {\r\n//     fontWeight: '600',\r\n//     color: '#333',\r\n//   };\r\n\r\n//   const buttonStyle = {\r\n//     padding: '10px 20px',\r\n//     backgroundColor: '#007bff',\r\n//     border: 'none',\r\n//     borderRadius: '5px',\r\n//     color: 'white',\r\n//     cursor: 'pointer',\r\n//     fontSize: '16px',\r\n//   };\r\n\r\n//   const formStyle = {\r\n//     maxWidth: '400px',\r\n//     margin: '20px auto',\r\n//     padding: '15px',\r\n//     border: '1px solid #ddd',\r\n//     borderRadius: '8px',\r\n//     backgroundColor: '#fafafa',\r\n//     boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n//     fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n//   };\r\n\r\n//   return (\r\n//     <div style={formStyle}>\r\n//       <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Type:\r\n//             <br />\r\n//             <input type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Date:\r\n//             <br />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             From Account ID:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={fromAccountId}\r\n//               onChange={(e) => setFromAccountId(e.target.value)}\r\n//               placeholder=\"From Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Recipient Account:\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={recipientAccount}\r\n//               onChange={(e) => setRecipientAccount(e.target.value)}\r\n//               placeholder=\"Recipient Account ID\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Amount:\r\n//             <br />\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0.01\"\r\n//               step=\"0.01\"\r\n//               value={amount}\r\n//               onChange={(e) => setAmount(e.target.value)}\r\n//               placeholder=\"Amount\"\r\n//               required\r\n//               style={inputStyle}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label style={labelStyle}>\r\n//             Description:\r\n//             <br />\r\n//             <textarea\r\n//               value={description}\r\n//               onChange={(e) => setDescription(e.target.value)}\r\n//               placeholder=\"Optional description\"\r\n//               style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         <button type=\"submit\" style={buttonStyle}>\r\n//           Transfer\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TransferForm;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { transferMoney } from './api'; // Adjust the import path as needed\r\n\r\nfunction TransferForm({ accountId }) {\r\n  const [fromAccountId, setFromAccountId] = useState(accountId || '');\r\n  const [date, setDate] = useState('');\r\n  const [recipientAccount, setRecipientAccount] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (accountId) {\r\n      setFromAccountId(accountId);\r\n    }\r\n  }, [accountId]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setSuccessMessage('');\r\n    setErrorMessage('');\r\n\r\n    if (!date || !recipientAccount || !amount || !fromAccountId) {\r\n      setErrorMessage('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    const amountValue = parseFloat(amount);\r\n    if (isNaN(amountValue) || amountValue <= 0) {\r\n      setErrorMessage('Please enter a valid amount greater than 0.');\r\n      return;\r\n    }\r\n\r\n    const transferData = {\r\n      type: 'Transfer',\r\n      date,\r\n      fromAccountId,\r\n      recipientAccount,\r\n      amount: amountValue,\r\n      description,\r\n    };\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await transferMoney(transferData);\r\n\r\n      // Assume backend returns some success info, adjust if needed\r\n      setSuccessMessage('Transfer successful! Transaction ID: ' + (response.data.transactionId || 'N/A'));\r\n\r\n      // Reset form except fromAccountId\r\n      setDate('');\r\n      setRecipientAccount('');\r\n      setAmount('');\r\n      setDescription('');\r\n    } catch (error) {\r\n      console.error('Transfer error:', error);\r\n      const msg = error.response?.data?.message || error.message || 'An error occurred during transfer. Please try again.';\r\n      setErrorMessage(msg);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const inputStyle = {\r\n    width: '100%',\r\n    padding: '8px',\r\n    marginTop: '4px',\r\n    marginBottom: '12px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc',\r\n    fontSize: '14px',\r\n  };\r\n\r\n  const labelStyle = {\r\n    fontWeight: '600',\r\n    color: '#333',\r\n  };\r\n\r\n  const buttonStyle = {\r\n    padding: '10px 20px',\r\n    backgroundColor: loading ? '#999' : '#007bff',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    cursor: loading ? 'not-allowed' : 'pointer',\r\n    fontSize: '16px',\r\n  };\r\n\r\n  const formStyle = {\r\n    maxWidth: '400px',\r\n    margin: '20px auto',\r\n    padding: '15px',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '8px',\r\n    backgroundColor: '#fafafa',\r\n    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n  };\r\n\r\n  const messageStyle = {\r\n    padding: '10px',\r\n    borderRadius: '5px',\r\n    marginBottom: '15px',\r\n  };\r\n\r\n  return (\r\n    <div style={formStyle}>\r\n      <h2 style={{ color: '#222', marginBottom: '20px' }}>Transfer Money</h2>\r\n\r\n      {successMessage && (\r\n        <div style={{ ...messageStyle, backgroundColor: '#d4edda', color: '#155724' }}>\r\n          {successMessage}\r\n        </div>\r\n      )}\r\n      {errorMessage && (\r\n        <div style={{ ...messageStyle, backgroundColor: '#f8d7da', color: '#721c24' }}>\r\n          {errorMessage}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"type\" style={labelStyle}>\r\n            Type:\r\n          </label>\r\n          <br />\r\n          <input id=\"type\" type=\"text\" value=\"Transfer\" readOnly style={inputStyle} />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"date\" style={labelStyle}>\r\n            Date:\r\n          </label>\r\n          <br />\r\n          <input\r\n            id=\"date\"\r\n            type=\"date\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            required\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"fromAccountId\" style={labelStyle}>\r\n            From Account ID:\r\n          </label>\r\n          <br />\r\n          <input\r\n            id=\"fromAccountId\"\r\n            type=\"text\"\r\n            value={fromAccountId}\r\n            onChange={(e) => setFromAccountId(e.target.value)}\r\n            placeholder=\"From Account ID\"\r\n            required\r\n            style={inputStyle}\r\n            readOnly={!!accountId}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"recipientAccount\" style={labelStyle}>\r\n            Recipient Account:\r\n          </label>\r\n          <br />\r\n          <input\r\n            id=\"recipientAccount\"\r\n            type=\"text\"\r\n            value={recipientAccount}\r\n            onChange={(e) => setRecipientAccount(e.target.value)}\r\n            placeholder=\"Recipient Account ID\"\r\n            required\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"amount\" style={labelStyle}>\r\n            Amount:\r\n          </label>\r\n          <br />\r\n          <input\r\n            id=\"amount\"\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Amount\"\r\n            required\r\n            style={inputStyle}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"description\" style={labelStyle}>\r\n            Description:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            id=\"description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            placeholder=\"Optional description\"\r\n            style={{ ...inputStyle, height: '80px', resize: 'vertical' }}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n          {loading ? 'Transferring...' : 'Transfer'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransferForm;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}