{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishnu\\\\project\\\\OnlineBankingDashboard\\\\cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb\\\\reactapp\\\\src\\\\components\\\\AccountDetails.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import { getAccountDetails, getTransactionHistory } from '../utils/api';\n\n// // function AccountDetails({ accountId }) {\n// //   const [account, setAccount] = useState(null);\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     async function fetchData() {\n// //       try {\n// //         setLoading(true);\n// //         setError(null);\n\n// //         const accountRes = await getAccountDetails(accountId);\n// //         const transactionsRes = await getTransactionHistory(accountId);\n\n// //         console.log(accountRes.data); // Check key names here\n\n// //         setAccount(accountRes.data);\n// //         setTransactions(transactionsRes.data);\n// //       } catch (err) {\n// //         setError('Failed to load data');\n// //         console.error(err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     }\n\n// //     fetchData();\n// //   }, [accountId]);\n\n// //   if (loading) return <p>Loading...</p>;\n// //   if (error) return <p>{error}</p>;\n// //   if (!account) return <p>Account not found</p>;\n\n// //   return (\n// //     <div>\n// //       <h2>Account Details</h2>\n// //       <p><strong>Account Number:</strong> {account.accountNumber || account.account_number || 'N/A'}</p>\n// //       <p><strong>Account Holder:</strong> {account.accountHolder || account.holderName || 'N/A'}</p> {/* Updated here */}\n// //       <p><strong>Account Type:</strong> {account.accountType || account.account_type || 'N/A'}</p>\n// //       <p><strong>Balance:</strong> ${Number(account.balance ?? 0).toFixed(2)}</p>\n// //       <p><strong>Created Date:</strong> {account.createdDate || account.created_date ? new Date(account.createdDate || account.created_date).toLocaleDateString() : 'N/A'}</p>\n\n// //       <h3>Transaction History</h3>\n// //       {transactions.length === 0 ? (\n// //         <p>No transactions found.</p>\n// //       ) : (\n// //         <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\" style={{ width: '100%', marginTop: '1rem' }}>\n// //           <thead>\n// //             <tr>\n// //               <th>Date</th>\n// //               <th>Type</th>\n// //               <th>Amount</th>\n// //               <th>Description</th>\n// //               <th>Recipient Account</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {transactions.map(txn => (\n// //               <tr key={txn.transactionId || txn.id}>\n// //                 <td>{txn.transactionDate || txn.date ? new Date(txn.transactionDate || txn.date).toLocaleString() : 'N/A'}</td>\n// //                 <td>{txn.transactionType || txn.type || 'N/A'}</td>\n// //                 <td>${Number(txn.amount ?? 0).toFixed(2)}</td>\n// //                 <td>{txn.description || '-'}</td>\n// //                 <td>{txn.recipientAccountId || txn.recipient_account || txn.recipientAccount || '-'}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default AccountDetails;\n\n// import React, { useEffect, useState } from 'react';\n// import { getAccountDetails, getTransactionHistory } from '../utils/api';\n\n// function AccountDetails({ accountId }) {\n//   const [account, setAccount] = useState(null);\n//   const [transactions, setTransactions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const accountRes = await getAccountDetails(accountId);\n//         const transactionsRes = await getTransactionHistory(accountId);\n\n//         setAccount(accountRes.data);\n//         setTransactions(transactionsRes.data);\n//       } catch (err) {\n//         setError('Failed to load data');\n//         console.error(err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n\n//     fetchData();\n//   }, [accountId]);\n\n//   if (loading) return <p style={styles.message}>Loading...</p>;\n//   if (error) return <p style={styles.message}>{error}</p>;\n//   if (!account) return <p style={styles.message}>Account not found</p>;\n\n//   return (\n//     <div style={styles.container}>\n//       <h2 style={styles.heading}>Account Details</h2>\n//       <p><strong>Account Number:</strong> {account.accountNumber || account.account_number || 'N/A'}</p>\n//       <p><strong>Account Holder:</strong> {account.accountHolder || account.holderName || 'N/A'}</p>\n//       <p><strong>Account Type:</strong> {account.accountType || account.account_type || 'N/A'}</p>\n//       <p><strong>Balance:</strong> ${Number(account.balance ?? 0).toFixed(2)}</p>\n//       <p><strong>Created Date:</strong> {account.createdDate || account.created_date ? new Date(account.createdDate || account.created_date).toLocaleDateString() : 'N/A'}</p>\n\n//       <h3 style={styles.subHeading}>Transaction History</h3>\n//       {transactions.length === 0 ? (\n//         <p style={styles.message}>No transactions found.</p>\n//       ) : (\n//         <table style={styles.table}>\n//           <thead>\n//             <tr>\n//               <th style={styles.th}>Date</th>\n//               <th style={styles.th}>Type</th>\n//               <th style={styles.th}>Amount</th>\n//               <th style={styles.th}>Description</th>\n//               <th style={styles.th}>Recipient Account</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {transactions.map(txn => (\n//               <tr key={txn.transactionId || txn.id}>\n//                 <td style={styles.td}>{txn.transactionDate || txn.date ? new Date(txn.transactionDate || txn.date).toLocaleString() : 'N/A'}</td>\n//                 <td style={styles.td}>{txn.transactionType || txn.type || 'N/A'}</td>\n//                 <td style={styles.td}>${Number(txn.amount ?? 0).toFixed(2)}</td>\n//                 <td style={styles.td}>{txn.description || '-'}</td>\n//                 <td style={styles.td}>{txn.recipientAccountId || txn.recipient_account || txn.recipientAccount || '-'}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// }\n\n// // Inline styles\n// const styles = {\n//   container: {\n//     marginTop: '20px',\n//     padding: '20px',\n//     backgroundColor: '#f8fafc',\n//     border: '1px solid #e2e8f0',\n//     borderRadius: '8px',\n//     fontFamily: 'Arial, sans-serif',\n//   },\n//   heading: {\n//     fontSize: '22px',\n//     color: '#1e293b',\n//     marginBottom: '16px',\n//   },\n//   subHeading: {\n//     fontSize: '18px',\n//     marginTop: '24px',\n//     marginBottom: '12px',\n//     color: '#334155',\n//   },\n//   message: {\n//     color: '#666',\n//     fontSize: '16px',\n//     textAlign: 'center',\n//     margin: '12px 0',\n//   },\n//   table: {\n//     width: '100%',\n//     borderCollapse: 'collapse',\n//     marginTop: '1rem',\n//   },\n//   th: {\n//     backgroundColor: '#e0e7ff',\n//     color: '#1e3a8a',\n//     padding: '8px',\n//     textAlign: 'left',\n//     borderBottom: '1px solid #cbd5e1',\n//   },\n//   td: {\n//     padding: '8px',\n//     borderBottom: '1px solid #e2e8f0',\n//   },\n// };\n\n// export default AccountDetails;\nimport React, { useEffect, useState } from 'react';\nimport { getAllAccounts } from '../utils/api';\nimport AccountDetails from './AccountDetails';\n// assuming you have this\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccountDashboard() {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccountId, setSelectedAccountId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getAllAccounts().then(response => {\n      setAccounts(response.data);\n      setLoading(false);\n    }).catch(() => {\n      setError('Failed to load accounts');\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: styles.message,\n    children: \"Loading accounts...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: styles.message,\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.heading,\n      children: \"Account Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.list,\n      children: accounts.map(acc => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: styles.listItem,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedAccountId(acc.accountId),\n          style: {\n            ...styles.button,\n            ...(selectedAccountId === acc.accountId ? styles.buttonSelected : {})\n          },\n          onMouseEnter: e => {\n            if (selectedAccountId !== acc.accountId) {\n              e.target.style.backgroundColor = '#3730a3';\n              e.target.style.transform = 'translateY(-2px)';\n              e.target.style.boxShadow = '0 8px 25px rgba(79, 70, 229, 0.3)';\n            }\n          },\n          onMouseLeave: e => {\n            if (selectedAccountId !== acc.accountId) {\n              e.target.style.backgroundColor = '#4f46e5';\n              e.target.style.transform = 'translateY(0)';\n              e.target.style.boxShadow = '0 4px 15px rgba(79, 70, 229, 0.2)';\n            }\n          },\n          children: [acc.accountHolderName, \" - \", acc.accountNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)\n      }, acc.accountId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), selectedAccountId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.detailsContainer,\n      children: /*#__PURE__*/_jsxDEV(AccountDetails, {\n        accountId: selectedAccountId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n// Enhanced inline style object with attractive modern design\n_s(AccountDashboard, \"dDTfXPu7rO8EOpPWOgoDY2CLq38=\");\n_c = AccountDashboard;\nconst styles = {\n  container: {\n    padding: '32px',\n    maxWidth: '900px',\n    margin: '40px auto',\n    background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',\n    boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.05)',\n    borderRadius: '24px',\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    position: 'relative',\n    overflow: 'hidden'\n  },\n  heading: {\n    textAlign: 'center',\n    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n    backgroundClip: 'text',\n    fontSize: '2.5rem',\n    fontWeight: '700',\n    marginBottom: '32px',\n    letterSpacing: '-0.02em',\n    position: 'relative'\n  },\n  list: {\n    listStyle: 'none',\n    padding: 0,\n    margin: 0,\n    display: 'grid',\n    gap: '16px'\n  },\n  listItem: {\n    marginBottom: '0',\n    position: 'relative'\n  },\n  button: {\n    background: 'linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%)',\n    color: '#ffffff',\n    border: 'none',\n    padding: '16px 24px',\n    fontSize: '16px',\n    fontWeight: '500',\n    borderRadius: '16px',\n    cursor: 'pointer',\n    width: '100%',\n    textAlign: 'left',\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    position: 'relative',\n    overflow: 'hidden',\n    boxShadow: '0 4px 15px rgba(79, 70, 229, 0.2)',\n    backdropFilter: 'blur(10px)',\n    letterSpacing: '0.01em',\n    lineHeight: '1.5'\n  },\n  buttonSelected: {\n    background: 'linear-gradient(135deg, #059669 0%, #0d9488 100%)',\n    boxShadow: '0 8px 25px rgba(5, 150, 105, 0.3)',\n    transform: 'translateY(-2px)'\n  },\n  message: {\n    textAlign: 'center',\n    color: '#6b7280',\n    fontSize: '18px',\n    fontWeight: '500',\n    padding: '60px 20px',\n    background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',\n    borderRadius: '20px',\n    margin: '40px auto',\n    maxWidth: '600px',\n    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.08)',\n    border: '1px solid rgba(255, 255, 255, 0.2)'\n  },\n  detailsContainer: {\n    marginTop: '32px',\n    padding: '24px',\n    backgroundColor: '#ffffff',\n    borderRadius: '20px',\n    border: '1px solid rgba(0, 0, 0, 0.05)',\n    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.08)',\n    position: 'relative',\n    overflow: 'hidden'\n  }\n};\nexport default AccountDashboard;\nvar _c;\n$RefreshReg$(_c, \"AccountDashboard\");","map":{"version":3,"names":["React","useEffect","useState","getAllAccounts","AccountDetails","jsxDEV","_jsxDEV","AccountDashboard","_s","accounts","setAccounts","selectedAccountId","setSelectedAccountId","loading","setLoading","error","setError","then","response","data","catch","style","styles","message","children","fileName","_jsxFileName","lineNumber","columnNumber","container","heading","list","map","acc","listItem","onClick","accountId","button","buttonSelected","onMouseEnter","e","target","backgroundColor","transform","boxShadow","onMouseLeave","accountHolderName","accountNumber","detailsContainer","_c","padding","maxWidth","margin","background","borderRadius","fontFamily","position","overflow","textAlign","WebkitBackgroundClip","WebkitTextFillColor","backgroundClip","fontSize","fontWeight","marginBottom","letterSpacing","listStyle","display","gap","color","border","cursor","width","transition","backdropFilter","lineHeight","marginTop","$RefreshReg$"],"sources":["C:/Users/vishnu/project/OnlineBankingDashboard/cdb0d0e7-4378-4b7b-82f4-1f4a189e249a-c94bf074-6f2d-47ef-ab4a-7c014a3ee3bb/reactapp/src/components/AccountDetails.js"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\r\n// // import { getAccountDetails, getTransactionHistory } from '../utils/api';\r\n\r\n// // function AccountDetails({ accountId }) {\r\n// //   const [account, setAccount] = useState(null);\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     async function fetchData() {\r\n// //       try {\r\n// //         setLoading(true);\r\n// //         setError(null);\r\n\r\n// //         const accountRes = await getAccountDetails(accountId);\r\n// //         const transactionsRes = await getTransactionHistory(accountId);\r\n\r\n// //         console.log(accountRes.data); // Check key names here\r\n\r\n// //         setAccount(accountRes.data);\r\n// //         setTransactions(transactionsRes.data);\r\n// //       } catch (err) {\r\n// //         setError('Failed to load data');\r\n// //         console.error(err);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     }\r\n\r\n// //     fetchData();\r\n// //   }, [accountId]);\r\n\r\n// //   if (loading) return <p>Loading...</p>;\r\n// //   if (error) return <p>{error}</p>;\r\n// //   if (!account) return <p>Account not found</p>;\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <h2>Account Details</h2>\r\n// //       <p><strong>Account Number:</strong> {account.accountNumber || account.account_number || 'N/A'}</p>\r\n// //       <p><strong>Account Holder:</strong> {account.accountHolder || account.holderName || 'N/A'}</p> {/* Updated here */}\r\n// //       <p><strong>Account Type:</strong> {account.accountType || account.account_type || 'N/A'}</p>\r\n// //       <p><strong>Balance:</strong> ${Number(account.balance ?? 0).toFixed(2)}</p>\r\n// //       <p><strong>Created Date:</strong> {account.createdDate || account.created_date ? new Date(account.createdDate || account.created_date).toLocaleDateString() : 'N/A'}</p>\r\n\r\n// //       <h3>Transaction History</h3>\r\n// //       {transactions.length === 0 ? (\r\n// //         <p>No transactions found.</p>\r\n// //       ) : (\r\n// //         <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\" style={{ width: '100%', marginTop: '1rem' }}>\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Date</th>\r\n// //               <th>Type</th>\r\n// //               <th>Amount</th>\r\n// //               <th>Description</th>\r\n// //               <th>Recipient Account</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {transactions.map(txn => (\r\n// //               <tr key={txn.transactionId || txn.id}>\r\n// //                 <td>{txn.transactionDate || txn.date ? new Date(txn.transactionDate || txn.date).toLocaleString() : 'N/A'}</td>\r\n// //                 <td>{txn.transactionType || txn.type || 'N/A'}</td>\r\n// //                 <td>${Number(txn.amount ?? 0).toFixed(2)}</td>\r\n// //                 <td>{txn.description || '-'}</td>\r\n// //                 <td>{txn.recipientAccountId || txn.recipient_account || txn.recipientAccount || '-'}</td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AccountDetails;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { getAccountDetails, getTransactionHistory } from '../utils/api';\r\n \r\n\r\n// function AccountDetails({ accountId }) {\r\n//   const [account, setAccount] = useState(null);\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchData() {\r\n//       try {\r\n//         setLoading(true);\r\n//         setError(null);\r\n\r\n//         const accountRes = await getAccountDetails(accountId);\r\n//         const transactionsRes = await getTransactionHistory(accountId);\r\n\r\n//         setAccount(accountRes.data);\r\n//         setTransactions(transactionsRes.data);\r\n//       } catch (err) {\r\n//         setError('Failed to load data');\r\n//         console.error(err);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     }\r\n\r\n//     fetchData();\r\n//   }, [accountId]);\r\n\r\n//   if (loading) return <p style={styles.message}>Loading...</p>;\r\n//   if (error) return <p style={styles.message}>{error}</p>;\r\n//   if (!account) return <p style={styles.message}>Account not found</p>;\r\n\r\n//   return (\r\n//     <div style={styles.container}>\r\n//       <h2 style={styles.heading}>Account Details</h2>\r\n//       <p><strong>Account Number:</strong> {account.accountNumber || account.account_number || 'N/A'}</p>\r\n//       <p><strong>Account Holder:</strong> {account.accountHolder || account.holderName || 'N/A'}</p>\r\n//       <p><strong>Account Type:</strong> {account.accountType || account.account_type || 'N/A'}</p>\r\n//       <p><strong>Balance:</strong> ${Number(account.balance ?? 0).toFixed(2)}</p>\r\n//       <p><strong>Created Date:</strong> {account.createdDate || account.created_date ? new Date(account.createdDate || account.created_date).toLocaleDateString() : 'N/A'}</p>\r\n\r\n//       <h3 style={styles.subHeading}>Transaction History</h3>\r\n//       {transactions.length === 0 ? (\r\n//         <p style={styles.message}>No transactions found.</p>\r\n//       ) : (\r\n//         <table style={styles.table}>\r\n//           <thead>\r\n//             <tr>\r\n//               <th style={styles.th}>Date</th>\r\n//               <th style={styles.th}>Type</th>\r\n//               <th style={styles.th}>Amount</th>\r\n//               <th style={styles.th}>Description</th>\r\n//               <th style={styles.th}>Recipient Account</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {transactions.map(txn => (\r\n//               <tr key={txn.transactionId || txn.id}>\r\n//                 <td style={styles.td}>{txn.transactionDate || txn.date ? new Date(txn.transactionDate || txn.date).toLocaleString() : 'N/A'}</td>\r\n//                 <td style={styles.td}>{txn.transactionType || txn.type || 'N/A'}</td>\r\n//                 <td style={styles.td}>${Number(txn.amount ?? 0).toFixed(2)}</td>\r\n//                 <td style={styles.td}>{txn.description || '-'}</td>\r\n//                 <td style={styles.td}>{txn.recipientAccountId || txn.recipient_account || txn.recipientAccount || '-'}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // Inline styles\r\n// const styles = {\r\n//   container: {\r\n//     marginTop: '20px',\r\n//     padding: '20px',\r\n//     backgroundColor: '#f8fafc',\r\n//     border: '1px solid #e2e8f0',\r\n//     borderRadius: '8px',\r\n//     fontFamily: 'Arial, sans-serif',\r\n//   },\r\n//   heading: {\r\n//     fontSize: '22px',\r\n//     color: '#1e293b',\r\n//     marginBottom: '16px',\r\n//   },\r\n//   subHeading: {\r\n//     fontSize: '18px',\r\n//     marginTop: '24px',\r\n//     marginBottom: '12px',\r\n//     color: '#334155',\r\n//   },\r\n//   message: {\r\n//     color: '#666',\r\n//     fontSize: '16px',\r\n//     textAlign: 'center',\r\n//     margin: '12px 0',\r\n//   },\r\n//   table: {\r\n//     width: '100%',\r\n//     borderCollapse: 'collapse',\r\n//     marginTop: '1rem',\r\n//   },\r\n//   th: {\r\n//     backgroundColor: '#e0e7ff',\r\n//     color: '#1e3a8a',\r\n//     padding: '8px',\r\n//     textAlign: 'left',\r\n//     borderBottom: '1px solid #cbd5e1',\r\n//   },\r\n//   td: {\r\n//     padding: '8px',\r\n//     borderBottom: '1px solid #e2e8f0',\r\n//   },\r\n// };\r\n\r\n// export default AccountDetails;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAllAccounts } from '../utils/api';\r\nimport AccountDetails from './AccountDetails';\r\n // assuming you have this\r\n\r\nfunction AccountDashboard() {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedAccountId, setSelectedAccountId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getAllAccounts()\r\n      .then(response => {\r\n        setAccounts(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setError('Failed to load accounts');\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) return <p style={styles.message}>Loading accounts...</p>;\r\n  if (error) return <p style={styles.message}>{error}</p>;\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h1 style={styles.heading}>Account Dashboard</h1>\r\n      <ul style={styles.list}>\r\n        {accounts.map(acc => (\r\n          <li key={acc.accountId} style={styles.listItem}>\r\n            <button\r\n              onClick={() => setSelectedAccountId(acc.accountId)}\r\n              style={{\r\n                ...styles.button,\r\n                ...(selectedAccountId === acc.accountId ? styles.buttonSelected : {}),\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                if (selectedAccountId !== acc.accountId) {\r\n                  e.target.style.backgroundColor = '#3730a3';\r\n                  e.target.style.transform = 'translateY(-2px)';\r\n                  e.target.style.boxShadow = '0 8px 25px rgba(79, 70, 229, 0.3)';\r\n                }\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                if (selectedAccountId !== acc.accountId) {\r\n                  e.target.style.backgroundColor = '#4f46e5';\r\n                  e.target.style.transform = 'translateY(0)';\r\n                  e.target.style.boxShadow = '0 4px 15px rgba(79, 70, 229, 0.2)';\r\n                }\r\n              }}\r\n            >\r\n              {acc.accountHolderName} - {acc.accountNumber}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {selectedAccountId && (\r\n        <div style={styles.detailsContainer}>\r\n          <AccountDetails accountId={selectedAccountId} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Enhanced inline style object with attractive modern design\r\nconst styles = {\r\n  container: {\r\n    padding: '32px',\r\n    maxWidth: '900px',\r\n    margin: '40px auto',\r\n    background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',\r\n    boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.05)',\r\n    borderRadius: '24px',\r\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n  },\r\n  heading: {\r\n    textAlign: 'center',\r\n    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n    WebkitBackgroundClip: 'text',\r\n    WebkitTextFillColor: 'transparent',\r\n    backgroundClip: 'text',\r\n    fontSize: '2.5rem',\r\n    fontWeight: '700',\r\n    marginBottom: '32px',\r\n    letterSpacing: '-0.02em',\r\n    position: 'relative',\r\n  },\r\n  list: {\r\n    listStyle: 'none',\r\n    padding: 0,\r\n    margin: 0,\r\n    display: 'grid',\r\n    gap: '16px',\r\n  },\r\n  listItem: {\r\n    marginBottom: '0',\r\n    position: 'relative',\r\n  },\r\n  button: {\r\n    background: 'linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%)',\r\n    color: '#ffffff',\r\n    border: 'none',\r\n    padding: '16px 24px',\r\n    fontSize: '16px',\r\n    fontWeight: '500',\r\n    borderRadius: '16px',\r\n    cursor: 'pointer',\r\n    width: '100%',\r\n    textAlign: 'left',\r\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    boxShadow: '0 4px 15px rgba(79, 70, 229, 0.2)',\r\n    backdropFilter: 'blur(10px)',\r\n    letterSpacing: '0.01em',\r\n    lineHeight: '1.5',\r\n  },\r\n  buttonSelected: {\r\n    background: 'linear-gradient(135deg, #059669 0%, #0d9488 100%)',\r\n    boxShadow: '0 8px 25px rgba(5, 150, 105, 0.3)',\r\n    transform: 'translateY(-2px)',\r\n  },\r\n  message: {\r\n    textAlign: 'center',\r\n    color: '#6b7280',\r\n    fontSize: '18px',\r\n    fontWeight: '500',\r\n    padding: '60px 20px',\r\n    background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',\r\n    borderRadius: '20px',\r\n    margin: '40px auto',\r\n    maxWidth: '600px',\r\n    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.08)',\r\n    border: '1px solid rgba(255, 255, 255, 0.2)',\r\n  },\r\n  detailsContainer: {\r\n    marginTop: '32px',\r\n    padding: '24px',\r\n    backgroundColor: '#ffffff',\r\n    borderRadius: '20px',\r\n    border: '1px solid rgba(0, 0, 0, 0.05)',\r\n    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.08)',\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n  },\r\n};\r\n\r\nexport default AccountDashboard;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,cAAc;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAC5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAED,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}